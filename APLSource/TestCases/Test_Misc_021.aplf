 r←Test_Misc_021(stopFlag batchFlag);⎕TRAP;path;zipFilename;targetFolder;myZip;list2;this;list1;fileSize
⍝ Create a new Zip archive and add some files
 ⎕TRAP←(999 'C' '∘∘∘ ⍝ Deliberate error')(0 'N')
 r←T._Failed

 path←∆GetTestFolderInTemp 1⊃⎕SI
 zipFilename←path,'/MyZipFile.zip'
 myZip←⎕NEW ##.ZipArchive(,⊂zipFilename)

 myZip.Add ##.CiderConfig.HOME,'/TestData\level-1-a.txt'
 myZip.Add ##.CiderConfig.HOME,'/TestData\file with spaces'
 myZip.Add ##.CiderConfig.HOME,'/TestData\level-1-b.txt'
 myZip.Add ##.CiderConfig.HOME,'/TestData/sub-1/sub-1-level-2-a.txt'
 myZip.Add ##.CiderConfig.HOME,'/TestData/sub-1/sub-1-level-2-b.txt'
 myZip.Add ##.CiderConfig.HOME,'/TestData/sub-2/sub-2-1/sub-2-1-level-3-a.txt'
 myZip.Add ##.CiderConfig.HOME,'/TestData/sub-2/sub-2-1/sub-2-1-level-3-b.txt'
 list1←myZip.List
 myZip.Dispose

 list2←⊃('recursive' 1)F.Dir ##.CiderConfig.HOME,'/TestData/'
 list2/⍨←F.IsFile list2
 :If 'Win'≢##.APLTreeUtils2.GetOperatingSystem ⍬
     list1←'/',¨list1  ⍝ On non- Windows platforms a leading "/" is part of the names
 :EndIf
 →T.GoToTidyUp~APLTreeUtils2.LazyMatch/∆DropLeadingDotSlash¨F.NormalizePath¨list1 list2
 fileSize←{size←⎕NSIZE ⍵ ⋄ _←⎕NUNTIE ⍵ ⋄ size}zipFilename ⎕NTIE 0
 →T.GoToTidyUp 100>fileSize

 r←T._OK

∆TidyUp:
 Assert 0=1⊃F.RmDir path
⍝Done
